@using MatrixWeatherDisplay;
<input type="range" min="@Min" step="@((1/Math.Pow(10, Decimals)).ToInputString())" max="@Max" class="form-range" value="@Value.ToInputString(Decimals, Multiplier)" @oninput="ChangeValue" disabled="@Disabled">
<div id="@_id" class="input-container">
    <input type="number" min="@Min" max="@Max" class="form-control" value="@Value.ToInputString(Decimals, Multiplier)" @oninput="ChangeValue" disabled="@Disabled" style="width: @(_width)px">
</div>

<style>
    #@(_id)::after {
        content: '@Text';
    }
</style>

@code {
    [Parameter]
    public int Decimals { get; set; }

    [Parameter]
    public double Value { get; set; }

    [Parameter]
    public EventCallback<double> OnInput { get; set; }

    [Parameter]
    public int Min { get; set; } = 0;

    [Parameter]
    public int Max { get; set; } = 60;

    [Parameter]
    public bool Disabled { get; set; } = false;

    protected string Text { get; set; } = "";

    protected int Multiplier { get; set; } = 1;

    private int _width = 80;

    private string _id = $"input-{Guid.NewGuid()}";

    private async Task ChangeValue(ChangeEventArgs args) {
        if (!args.ToDouble(out double d)) {
            return;
        }

        Value = d.MinMax(Min, Max);

        Value /= Multiplier;

        await OnInput.InvokeAsync(Value);
    }

    protected override void OnParametersSet() {
        int chars = Text.Length + Decimals + 1 + (Math.Max(Min.ToString().Length, Max.ToString().Length));
        _width = chars * 13;
    }
}