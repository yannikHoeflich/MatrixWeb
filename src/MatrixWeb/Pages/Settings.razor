@page "/Settings"
@using MatrixWeatherDisplay.Data;
@using MatrixWeatherDisplay.Services;
@using MatrixWeatherDisplay.Services.Weather;
@using MatrixWeb.Services;
@using System.Globalization;

@inject SpotifyService spotify
@inject NavigationManager navManager
@inject DisplayService display
@inject WeatherService weather
@inject BrightnessService autoBrightness
@inject DeviceService devices


<p class="settings-container">
    <h4>Display</h4>

    <h5>Generelle Helligkeit</h5>
    <input type="range" min="0" step="0.1" max="100" class="form-range" value="@autoBrightness.GeneralBrightness.ToInputString(1, 100)" @oninput="e => ChangeMaxBrightness(e)">
    <div class="percent">
        <input type="number" min="0" max="100" class="form-control" value="@autoBrightness.GeneralBrightness.ToInputString(1, 100)" @oninput="e => ChangeMaxBrightness(e)">
    </div>

    <h5>Helligkeits Zeit Verschiebung</h5>
    <input type="range" min="-12" step="0.01" max="12" class="form-range" value="@autoBrightness.TimeShift.ToInputString(2, 0)" @oninput="e => ChangeHourShift(e)">

    <div class="hours">
        <input type="number" min="-12" max="12" class="form-control" value="@autoBrightness.TimeShift.ToInputString(1, 1)" @oninput="e => ChangeHourShift(e)">
    </div>

    <h5>Rot schwelle</h5>
    <input type="range" min="0" step="0.1" max="100" class="form-range" value="@display.RedManager.RedThreshold.ToInputString(1, 100)" @oninput="e => ChangeRedThreshold(e)">
    <div class="percent">
        <input type="number" min="0" max="100" class="form-control" value="@display.RedManager.RedThreshold.ToInputString(1, 100)" @oninput="e => ChangeRedThreshold(e)">
    </div>
<p class="description">
        @if (_redTimeRange == TimeRange.Always) {
            <text>Immer Rot</text>
        } else if (_redTimeRange == TimeRange.Never) {
            <text>Nie Rot</text>
        } else {
            <text>Rot von <b>@_redTimeRange.Start</b> bis <b>@_redTimeRange.End</b></text>
        }
</p>
</p>

<p class="settings-container">
    <h4>Spotify</h4>
    @if (spotify.HasClientKeys) {
        @if (spotify.IsConnected) {
            <button type="button" @onclick="DisconnectSpotify" class="btn btn-success">Spotify Verbunden</button>
        } else {
            <a class="btn btn-secondary" href="@spotify.GetSpotifyUrl(GetCallbackUrl())">mit Spotify verbinden</a>
        }
    } else {
    <p class="red">Spotify ist deaktiviert, füge <i>Client Id</i> und <i>Client Secret</i> zu <i>config.json</i> hinzu, um diese funktion zu aktievieren</p>
    }
</p>

<p class="settings-container">
    <h4>Wetter</h4>
    <h5>Wetter Anbieter</h5>
    <select class="form-select" aria-label="Default select example" @onchange="ChangeWeatherProvider">
        @if (weather.IsProviderEnabled(WeatherProvider.OpenWeatherMap)) {
            <option value="0" selected="@WeatherProviderSelected(WeatherProvider.OpenWeatherMap)">Open Weather Map</option>
        }
        @if (weather.IsProviderEnabled(WeatherProvider.WeatherApi)) {
            <option value="1" selected="@WeatherProviderSelected(WeatherProvider.WeatherApi)">Weather Api</option>
        }
    </select>
</p>

<p class="settings-container">
    <h4>Display Controller</h4>
    @if (_restarting) {
    <p class="btn btn-secondary disabled">Display Controller neustarten</p>
    } else {
    <button type="button" @onclick="RestartDisplay" class="btn btn-danger">Display Controller neustarten</button>
    }
</p>
@code {
    private bool _restarting;
    private TimeRange _redTimeRange;

    protected override void OnInitialized() {
        _redTimeRange = display.RedManager.GetRedTimeRange();
    }

    private string GetCallbackUrl() {
        var uri = new Uri(navManager.BaseUri);
        string url = $"{uri.Scheme}://{uri.Host}:{uri.Port}/Spotify/Callback";

        return url;
    }

    private void DisconnectSpotify() {
        spotify.Logout();
    }

    private Task RestartDisplay() {
        _restarting = true;
        _ = Task.Run(async () => {
            await display.RestartAsync();
            _restarting = false;
            await InvokeAsync(StateHasChanged);
        });

        return Task.CompletedTask;
    }

    private Task ChangeWeatherProvider(ChangeEventArgs eventArgs) {
        if (!eventArgs.ToInt(out int value)) {
            return Task.CompletedTask;
        }

        var newProvider = (WeatherProvider)value;
        weather.WeatherProvider = newProvider;

        return Task.CompletedTask;
    }

    private void ChangeRedThreshold(ChangeEventArgs eventArgs) {
        if (!eventArgs.ToDouble(out double value)) {
            return;
        }

        value = value.MinMax(0, 100);

        display.RedManager.RedThreshold = value / 100;
        _redTimeRange = display.RedManager.GetRedTimeRange();
    }

    private async Task ChangeMaxBrightness(ChangeEventArgs eventArgs) {
        if (!eventArgs.ToDouble(out double value)) {
            return;
        }

        value = value.MinMax(0, 100);

        autoBrightness.GeneralBrightness = value / 100;
        await devices.UpdateBrightnessAsync();
    }

    private async Task ChangeHourShift(ChangeEventArgs eventArgs) {
        if (!eventArgs.ToDouble(out double value)) {
            return;
        }

        value = value.MinMax(-12, 12);

        autoBrightness.TimeShift = value;
        _redTimeRange = display.RedManager.GetRedTimeRange();
        await devices.UpdateBrightnessAsync();
    }

    private bool WeatherProviderSelected(WeatherProvider weatherProvider) {
        return weather.WeatherProvider == weatherProvider;
    }
}